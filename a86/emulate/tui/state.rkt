#lang racket

(provide current-tui-state
         current-emulator
         current-state-index
         current-memory

         with-example-state)

(require "../emulator.rkt"
         "../../ast.rkt"
         (submod "../emulator.rkt" private)

         (for-syntax syntax/parse))

(struct tui-state
  (emulator))

(define current-tui-state (make-parameter #f))

(define (current-emulator)
  (tui-state-emulator (current-tui-state)))

(define (current-state-index)
  (Emulator-current-index (current-emulator)))

(define (current-memory)
  (Emulator-memory (current-emulator)))

(define-syntax (with-example-state stx)
  (syntax-parse stx
    [(_ body ...+)
     #'(let ([emulator (initialize-emulator
                        (list
                         (Extern 'peek_byte)
                         (Extern 'read_byte)
                         (Extern 'write_byte)
                         (Extern 'raise_error)
                         (Global 'entry)
                         (Label 'entry)
                         (Push 'rbx)
                         (Mov 'rbx 'rdi)
                         (Add 'rbx 0)
                         (Mov 'rax 1552)
                         (Mov 'r9 'rax)
                         (And 'r9 15)
                         (Cmp 'r9 0)
                         (Jne 'raise_error_align)
                         (Cmp 'rax 0)
                         (Jl 'raise_error_align)
                         (Cmp 'rax 4080)
                         (Jg 'raise_error_align)
                         (Mov 'r15 'rsp)
                         (And 'r15 8)
                         (Sub 'rsp 'r15)
                         (Mov 'rdi 'rax)
                         (Call 'write_byte)
                         (Add 'rsp 'r15)
                         (Mov 'rax 120)
                         (Mov 'rax 656)
                         (Mov 'r9 'rax)
                         (And 'r9 15)
                         (Cmp 'r9 0)
                         (Jne 'raise_error_align)
                         (Add 'rax 16)
                         (Add 'rsp 0)
                         (Pop 'rbx)
                         (Ret)
                         (Label 'raise_error_align)
                         (Mov 'r15 'rsp)
                         (And 'r15 8)
                         (Sub 'rsp 'r15)
                         (Call 'raise_error)
                         (Label 'get_nexts)
                         (Mov 'r9 'rsi)
                         (Mov 'r8 'rsi)
                         (Sub 'r8 1)
                         (Label 'get_nexts_loop10369)
                         (Mov 'r10 'r9)
                         (Add 'r10 'r8)
                         (Sal 'r10 3)
                         (Add 'r10 'rsp)
                         (Mov 'rsi (Offset 'r10 0))
                         (Push 'r8)
                         (Push 'r9)
                         (Push 'rdi)
                         (Call 'seq_ref)
                         (Cmp 'rdi 1)
                         (Je 'get_nexts_abort10370)
                         (Pop 'rdi)
                         (Pop 'r9)
                         (Pop 'r8)
                         (Mov 'r10 'r8)
                         (Sal 'r10 3)
                         (Add 'r10 'rsp)
                         (Mov (Offset 'r10 0) 'rax)
                         (Sub 'r8 1)
                         (Cmp 'r8 0)
                         (Jge 'get_nexts_loop10369)
                         (Mov 'rax 0)
                         (Ret)
                         (Label 'get_nexts_abort10370)
                         (Mov 'rax 1)
                         (Ret)
                         (Label 'seq_ref)
                         (Mov 'r9 'rsi)
                         (And 'r9 7)
                         (Mov 'r8 'rdi)
                         (Cmp 'r9 2)
                         (Je 'list_ref10371)
                         (Cmp 'r9 3)
                         (Je 'vect_ref10372)
                         (Cmp 'r9 4)
                         (Je 'string_ref10373)
                         (Jmp 'raise_error_align)
                         (Label 'list_ref10371)
                         (Mov 'r9 'rsi)
                         (And 'r9 7)
                         (Cmp 'r9 2)
                         (Jne 'seq_ref_fail10374)
                         (Xor 'rsi 2)
                         (Mov 'rax (Offset 'rsi 8))
                         (Mov 'rsi (Offset 'rsi 0))
                         (Sub 'r8 1)
                         (Cmp 'r8 0)
                         (Jge 'list_ref10371)
                         (Jmp 'seq_ref_success10375)
                         (Label 'vect_ref10372)
                         (Xor 'rsi 3)
                         (Mov 'r9 (Offset 'rsi 0))
                         (Cmp 'rdi 'r9)
                         (Jge 'seq_ref_fail10374)
                         (Sal 'rdi 3)
                         (Add 'rsi 'rdi)
                         (Mov 'rax (Offset 'rsi 8))
                         (Jmp 'seq_ref_success10375)
                         (Label 'string_ref10373)
                         (Xor 'rsi 4)
                         (Mov 'r9 (Offset 'rsi 0))
                         (Cmp 'rdi 'r9)
                         (Jge 'seq_ref_fail10374)
                         (Sal 'rdi 2)
                         (Add 'rsi 'rdi)
                         (Mov 'eax (Offset 'rsi 8))
                         (Sal 'rax 5)
                         (Or 'rax 8)
                         (Jmp 'seq_ref_success10375)
                         (Label 'seq_ref_fail10374)
                         (Mov 'rdi 1)
                         (Ret)
                         (Label 'seq_ref_success10375)
                         (Mov 'rdi 0)
                         (Ret)))])
         (parameterize ([current-tui-state (tui-state emulator)])
           body ...))]))
